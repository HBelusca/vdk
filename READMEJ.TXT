
    Virtual Disk Driver for Windows NT platform.
    Copyright (C) 2003-2005 Ken Kato (chitchat-lj@infoseek.jp)
    http://chitchat.at.infoseek.co.jp/vmware/vdkj.html

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

    The GNU General Public License is also available from:
    http://www.gnu.org/copyleft/gpl.html

    VDK の実現は Bo Branten 氏の 'ntifs' プロジェクトと 'filedisk' 
    プログラムがなければ不可能でした (http:// www.acc.umu.se/~bosse/)。
    すばらしいページを公開してくださっている氏に深く感謝いたします。


概要
====

    Windows NT / 2000 / XP 用の仮想ディスクドライバ (VDK) Version 3 です。
    Windows 2003 Server でも動作するとの報告をいただいています。

    VMware の仮想ディスクを Windows ホストにマウントして、普通のディスク
    ドライブのように使用することがで きます。

    以下の種類の VMware 仮想ディスクを読み取り専用・書き込み可能の両方で
    使用することができます：

    - VMware 2.x Plain Disk (*.pln)。
    - VMware 2.x / 3.x Virtual Disk (*.dsk, *.vmdk)。
    - VMware 2.x / 3.x REDO ログファイル。
    - VMware 2.x / 3.x 差分・階層 Virtual Disk
      (実態はリネームした REDO ログ)。階層レベルの制限はありません。
    - VMware 4.x Flat 仮想ディスク (複数ファイルおよび単一ファイル)。
    - VMware 4.x Sparse 仮想ディスク (複数ファイルおよび単一ファイル)。
    - VMware 4.x REDO ログファイル (実態は複数ファイルの Sparse ディスク)
      および差分・階層仮想ディスク (同上)。

    これらの仮想ディスクは、タイムスタンプやシーケンス番号の不整合など
    軽微なエラーのある場合でも使用することができます (単にエラーを無視
    するだけで、修正するわけではありません)。

    また、以下の種類のディスクイメージを使用することもできます: 

    - 単純なセクタイメージファイル。Linux の dd など一般のディスクダンプ
      ツールで作成することができます。

    - フロッピイメージや単一パーティションの dd イメージのような、
      パーティションテーブルのないディスクイメージ (これは仮想ディスクの
      種類というより内部フォーマットの違いですが)。
      この場合ディスク全体が一つのパーティションとして扱われます。

    また、VMware で使用可能な REDO ログファイルを生成することもできます。
    つまり、VDK で仮想ディスクを undoable モードで使用して、後で VMware で
    変更をコミットしたり、あるいは単に生成された REDO ログを削除して変更を
    破棄することができます。

    現在のところ、以下の仮想ディスクは使用できません
    (今後実装してゆく予定です) ：

    - 重大なエラーのある仮想ディスク。

    以下の仮想ディスクは使用できません。実装する予定もありません：

    - Raw Disk 
    - Raw Disk に基づく REDO ログファイル


注意・制限
==========

    VDK で使用している VMware 仮想ディスクの形式・構造は、全て私が独自に
    行った調査に基づいているものです。VMware 社あるいは他のいかなるソース
    からも公式な情報は一切いただいていません。このプログラムは完全に無保証
    であることをご理解いただいた上で、ご自身の責任において使用してください。

    VDK を使用するにはアドミニストレータ権限が必要です。これは Windows が
    アドミニストレータ以外のユーザにハードディスクボリュームの操作を許可
    しないためです。

    VDK はディスクドライバであって、ファイルシステムドライバではありません。
    ですから、Windows からアクセスできるのは Windows が認識できるパーティ
    ションに限られます。例えば、仮想ドライブ上の ext2 パーティションに
    アクセスするにはシステムにサードパーティの ext2 ファイルシステム
    ドライバをインストールする必要があります。

    VDK は Windows 2000/XP のマウントマネージャとは協調しません。
    そのため：

    - ディスク管理コンソール (パーティション操作やマウントポイントの設定)
      では VDK 仮想ドライブが認識されません。
      PartitionMagic などのサードパーティ製品は問題なく使用できます。

    - Windows デフラグツールでは VDK 仮想ドライブが認識されません。
      Diskeeper などのサードパーティ製品は問題なく使用できます。

    - GUI のチェックディスクが実行できない場合があります。
      コマンドラインの chkdsk.exe は問題なく実行できます。

    VDK では GPT パーティションを扱うことはできません。(というか、新種の
    パーティションテーブルだと言うこと以外、GPT が何なのかさえ良く分かって
    いないのですが)

    また、恐らく Windows NT のフォールトトレラントボリューム (ミラー、
    ストライプ、ボリュームセットなど) や Windows 2000/XP のダイナミック
    ディスクも使用できないと思います。
    私自身は使ったことがないのでわかりません。


今後の予定
==========

    - アドミニストレータ以外のユーザでも使えるようにする

    - Win2K/XP 対応強化
      (PnP サポート、マウントマネージャサポートなど)

    - GUI フロントエンド

    - 仮想ディスクエラーの修復

    - 仮想ディスク変換


ファイル
========

    アーカイブには以下のファイルが含まれています。

    vdk.sys       VDK カーネルモードドライバ

    vdk.exe       VDK ドライバコントロールプログラム (コンソール版)

    README.TXT    Virtual Disk Driver の解説 (英文)

    READMEJ.TXT   Virtual Disk Driver の解説 (日本語)

    COPYING.TXT   GNU GENERAL PUBLIC LICENSE Version 2 (英文)


インストール
============

    VDK.SYS と VDK.EXE をローカルドライブ上のディレクトリに置きます。
    VDK.EXE を使用してドライバ (VDK.SYS) をシステムにインストールします。
    詳細は以下の項目をお読みください。

    前バージョンの VDK.SYS がすでにインストールされている場合、通常は
    アンインストールする必要はありません。旧ドライバを停止してドライバ
    ファイルを置き換えるだけです。

    !!! 注意 !!!
    デバイスドライバをネットワークドライブから起動することはできません。
    ドライバファイル (VDK.SYS) は必ずローカルドライブに置いてください。


アンインストール
================

    VDK.EXE を使用してドライバ情報をシステムレジストリから削除します。
    その後、VDK.EXE と VDK.SYS ファイルをドライブから削除します。


VDK.EXE リファレンス
====================
    
    VDK.EXE は 仮想ディスクドライバ (VDK.SYS) を操作するコンソール
    プログラムです。
    
    構文：
      VDK.EXE コマンド [オプション...]

    コマンド：
      INSTALL   Virtual Disk ドライバをインストールします。
      REMOVE    Virtual Disk ドライバをアンインストールします。
      START     Virtual Disk ドライバを開始します。
      STOP      Virtual Disk ドライバを停止します。
      DRIVER    Virtual Disk ドライバ状態を表示します。
      DISK      初期ディスクデバイス数を設定します。
      CREATE    仮想ディスクデバイスを作成します。
      DELETE    仮想ディスクデバイスを削除します。
      VIEW      イメージファイル情報を表示します。
      OPEN      仮想ディスクイメージをオープンします。
      CLOSE     仮想ディスクイメージをクローズします。
      LINK      仮想パーティションにドライブ文字を割り当てます。
      ULINK     仮想パーティションのドライブ文字を削除します。
      IMAGE     オープン中のイメージファイル情報を表示します。
      HELP      コマンドヘルプを表示します。

    コマンドおよびオプションの大文字、小文字は区別されません。


VDK INSTALL
===========

    Virtual Disk ドライバをインストールします。

    構文：
      VDK.EXE INSTALL [ドライバ] [/AUTO]

    オプション：
      ドライバ  Virtual Disk ドライバ (VDK.SYS) のパスを指定します。
                省略時は VDK.EXE と同じディレクトリにある VDK.SYS です。
                (注意：カレントディレクトリではありません。)

      /AUTO     システム起動時にドライバを開始するよう設定します。
                (注意：インストール直後に開始されるわけではありません。)
                省略した場合は必要に応じて手動で開始しなければなりません。

    デバイスドライバをネットワークドライブから起動することはできません。
    VDK.SYS ファイルは必ずローカルドライブに置いてください。


VDK REMOVE
==========

    Virtual Disk ドライバをアンインストールします。

    構文：
      VDK.EXE REMOVE

    オプション：
      なし

    システムレジストリから Virtual Disk ドライバのエントリを削除しますが、
    ドライバファイル自体は削除しません。
    必要に応じてイメージファイルのクローズとドライバの停止を行います。


VDK START
=========

    Virtual Disk ドライバを開始します。

    構文：
      VDK.EXE START

    オプション：
      なし

    ドライバがインストールされていない場合、デフォルトオプションでの
    インストールを試みます。


VDK STOP
========

    Virtual Disk ドライバを停止します。

    構文：
      VDK.EXE STOP

    オプション：
      なし

    オープン中のイメージを全てクローズしてからドライバを停止します。
    仮想ドライブが他のプログラムから使用されている場合はドライバを停止
    できません。


VDK DRIVER
==========

    Virtual Disk ドライバ状態を表示します。

    構文：
      VDK.EXE DRIVER

    オプション：
      なし

    以下の情報を出力します：
        ドライバファイルのパス
        ドライババージョン
        ドライバ開始方法
        現在の実行状態
        仮想ディスクデバイス数


VDK DISK
========

    初期ディスクデバイス数を設定します。

    構文：
      VDK.EXE DISK デバイス数

    オプション：
      デバイス数  1 から 22 までの仮想ディスクデバイス数を指定します。
                  デフォルトは 4。

    ドライバ開始時に作成するディスクデバイス数を設定します。
    ドライバがすでに稼動中の場合、設定値は次回のドライバ開始時から
    有効になります。


VDK CREATE
==========

    仮想ディスクデバイスを追加します。

    構文：
      VDK.EXE CREATE

    オプション：
      なし

    新たな仮想ディスクデバイスを作成します。


VDK DELETE
==========

    仮想ディスクデバイスを削除します。

    構文：
      VDK.EXE DELETE

    オプション：
      なし

    一番最後のディスク番号の仮想ディスクデバイスを削除します。
    イメージがオープンされている場合、あるいは他のプロセスがデバイスを
    使用している場合には削除することができません。
    ディスク 0 を削除することはできません。


VDK VIEW
========

    イメージファイル情報を表示します。

    構文：
      VDK.EXE VIEW イメージ [/SEARCH:パス]

    オプション：
      イメージ  仮想ディスクイメージのパスを指定します。

      /SEARCH:パス
                イメージファイルや関連ファイルを検索するパスを指定します。
                ここで指定したパスは最優先で扱われ、コマンドラインや定義
                ファイル、仮想ディスクファイル内に明示的に記述されている
                パスよりも先に検索されます。

    指定された仮想ディスクイメージの以下の情報を表示します：

        仮想ディスクサイズ
        仮想ディスクを構成するファイルの数
        各ファイルの種別、容量、パス
        仮想ディスク上のパーティションのサイズおよびパーティションタイプ


VDK OPEN
========

    仮想ディスクイメージをオープンします。

    構文：
      VDK.EXE OPEN ディスク番号 イメージ [/RW | /WB | /UNDO | /UNDO:パス]
            [/SEARCH:パス] [/P:パーティション番号] [/L:ドライブ文字]

    オプション：
      ディスク番号
                目的の仮想ディスク番号を指定します。
                最初に指定しなければなりません。
                '*' を指定した場合、最初の空きディスクが使用されます。
                空きがない場合は新たなディスクを作成して使用します。

      イメージ  オープンするディスクイメージのパスを指定します。
                二番目に指定しなければなりません。
                「イメージ種別」の項目をお読みください。

      /RW       イメージを書き込み可能モードでオープンします。

      /WB       イメージを書き込みブロックモードでオープンします。

      /UNDO | /UNDO:パス
                イメージの REDO ログを作成して書き込み可能モードでオープンします。
                パスを指定した場合、REDO ログは指定ディレクトリに作成されます。

      /P:パーティション番号
                ドライブ文字を割り当てるパーティション番号を指定します。
                後で LINK/ULINK コマンドでドライブ文字を割り当てることもできます。
                省略した場合、マウント可能なパーティション全てに割り当てられます。

      /L:ドライブ文字
                仮想パーティションに割り当てるドライブ文字を指定します。
                省略した場合最初の利用可能なドライブ文字を自動選択します。

      /SEARCH:パス
                イメージファイルや関連ファイルを検索するパスを指定します。
                ここで指定したパスは最優先で扱われ、コマンドラインや定義
                ファイル、仮想ディスクファイル内に明示的に記述されている
                パスよりも先に検索されます。

    /RW、/WB、/UNDO はいずれか一つだけを指定することができます。何も指定しない場合
    イメージは読み取り専用でオープンされ、仮想ディスクは書き込み不可となります。
    「アクセスモード」の項目をお読みください。


VDK CLOSE
=========

    仮想ディスクイメージをクローズします。

    構文：
      VDK.EXE CLOSE ディスク番号
      VDK.EXE CLOSE ドライブ文字

    オプション：
      ディスク番号  目的の仮想ディスク番号を指定します。
                    '*' を指定した場合は全てのディスクをクローズします。

      ドライブ文字  目的の仮想ディスク上のパーティション (複数ある場合は
                    いずれか一つ) のドライブ文字を指定します。

      /Q            エラー発生時にプロンプトを出さずに処理を中断します。

      /F            エラー発生時にプロンプトを出さずに処理を強制続行します。

    他のプログラムが仮想ドライブを使用していないことを確認してください。
    通常は仮想ドライブが使用中の場合イメージをクローズしないでください。
    プロンプト、あるいは /F オプションを使用して強制的にクローズすることも
    できますが、その場合データが失われたり、オペレーティングシステムが予期
    しない動作をしたりする可能性があります。


VDK LINK
========

    仮想ディスクのパーティションにドライブ文字を割り当てます。

    構文：
      VDK.EXE LINK ディスク番号 パーティション番号 [ドライブ文字]

    オプション：
      ディスク番号
                目的の仮想ディスク番号を指定します。

      パーティション番号
                目的のパーティション番号を指定します。

      ドライブ文字
                割り当てるドライブ文字を指定します。
                省略した場合、最初の使用可能な文字が割り当てられます。

    一つのパーティションに複数のドライブ文字を割り当てることはできません。
    すでに使用されているドライブ文字を割り当てることもできません。
    パーティション番号および現在のドライブ文字の割り当ては IMAGE コマンドで
    確認することができます。

    通常のパーティションありの仮想ディスクの場合、最初のパーティションが
    パーティション１、次がパーティション２、というふうになります。
    Linux と違い、基本パーティションと論理パーティションのバーティション
    番号は区別されません。最後の基本バーティションの次の番号が最初の論理
    パーティション番号となります。

    パーティション０はディスク全体を表し (Linux での /dev/hda、/dev/hdb、
    /dev/sda と同様です) 、通常はドライブ文字を割り当てません。
    ドライブ文字を割り当てることも可能ですが、ファイルシステムがないので
    エクスプローラなどから普通にアクセスすることはできません。
    Linux で普通は /dev/hda をマウントしないのと同じ事です。

    フロッピイメージやリムーバブルディクスイメージなどパーティションのない
    仮想ディスクはパーティション０しかないので、パーティション０にドライブ
    文字を割り当てます。
    これも Linux で /dev/fd0 をマウントするのと似たようなことです。


VDK ULINK
=========

    仮想ディスク上のパーティションからドライブ文字を削除します。

    構文：
      VDK.EXE ULINK ディスク番号 パーティション番号
      VDK.EXE ULINK ドライブ文字

    オプション：
      ディスク番号
                目的の仮想ディスク番号を指定します。

      パーティション番号
                目的のパーティション番号を指定します。

      ドライブ文字
                削除するドライブ文字を指定します。

    このコマンドで削除できるのは VDK 仮想ディスクのドライブ文字のみです。
    パーティション番号および現在のドライブ文字の割り当ては IMAGE コマンドで
    確認することができます。

    仮想ディスクをクローズすると、そのディスク上に割り当てたドライブ文字は
    すべて削除されます。


VDK IMAGE
=========

    オープン中のディスクイメージ情報を表示します。

    構文：
      VDK.EXE IMAGE [ディスク番号]
      VDK.EXE IMAGE [ドライブ文字]

    OPTIONS:
      ディスク番号  対象の仮想ディスク番号を指定します。

      ドライブ文字  対象の仮想ディスク上のパーティション (複数ある場合は
                    いずれか一つ) のドライブ文字を指定します。

    対象の仮想ディスクの以下の情報を表示します：

        仮想ディスクアクセス種別
        仮想ディスクサイズ
        仮想ディスクを構成するファイルの数
        各ファイルの種別、容量、パス
        仮想ディスク上の各パーティションドライブ文字、サイズ、タイプ

    対象が指定されなかった場合、全ての仮想ディスクの情報が表示されます。


VDK HELP
========

    VDK.EXE のヘルプを表示します。

    構文：
      VDK.EXE HELP [コマンド]

    オプション：
      コマンド  ヘルプを表示する VDK コマンドを指定します。
                以下のコマンドが使用できます

                    INSTALL REMOVE  START   STOP    DRIVER
                    DISK    CREATE  DELETE  VIEW    OPEN
                    CLOSE   LINK    ULINK   IMAGE   HELP

                省略した場合は概要ヘルプが表示されます。


イメージ種別
============

    VIEW/OPEN コマンドでは、以下の書式でパスを指定できます。
    ローカル、ネットワーク両方のイメージファイルを使用できます。

      相対バス    [<dir>\]<filename>
      絶対パス    x:\<dir>\<filename>
      UNC パス    \\<server>\<share>\<dir>\<filename>

    VIEW/OPEN コマンドは以下の種類のイメージを使用できます：

    - VMware 2.x Plain Disk
        定義ファイル (*.pln) および一つまたは複数のデータファイル (*.dat)。
        VIEW/OPEN コマンドには定義ファイルのパスを指定します。

    - VMware 2.x 仮想ディスク / REDO ログ / 差分ディスク (COWD version 1)
        一つの仮想ディスクファイル (*.dsk または *.REDO)。
        VIEW/OPEN コマンドにはこのファイルのパスを指定します。

    - VMware 3.x 仮想ディスク / REDO ログ / 差分ディスク (COWD version 3)
        一つまたは複数の仮想ディスクファイル (*.vmdk または *.REDO)。
        VIEW/OPEN コマンドにはどれか一つのファイルのパスを指定します。

    - VMware 4.x 単一 Flat 仮想ディスク
        定義ファイル (*.vmdk) およびデータファイル (*-flat.vmdk) .
        VIEW/OPEN コマンドには定義ファイルのパスを指定します。

    - VMware 4.x 分割 Flat 仮想ディスク
        定義ファイル (*.vmdk) および一つまたは複数のデータファイル
        (*-fxxx.vmdk)。
        VIEW/OPEN コマンドには定義ファイルのパスを指定します。

    - VMware 4.x 単一 Sparse 仮想ディスク (VMDK version 1)
        一つの仮想ディスクファイル (*.vmdk) .
        VIEW/OPEN コマンドにはこのファイルのパスを指定します。

    - VMware 4.x 分割 Sparse 仮想ディスク / REDO ログ / 差分ディスク
      (VMDK version 1)
        定義ファイル (*.vmdk または *.REDO_*) および一つまたは複数の
        仮想ディスクファイル (*-sxxx.vmdk または *-sxxx.REDO_*)。
        VIEW/OPEN コマンドには定義ファイルのパスを指定します。

    - 単一セクタイメージファイル
        一つのセクタイメージファイル。
        ファイルサイズは 512 の倍数でなければなりません。
        VIEW/OPEN コマンドにはこのファイルのパスを指定します。

    - 複数のセクタイメージファイル
        定義ファイルおよび複数のイメージファイル。
        VIEW/OPEN コマンドには定義ファイルのパスを指定します。

        この場合の定義ファイルは、単純なイメージファイル一覧です。

        例1
        image01.dat
        image02.dat
        image03.dat
        ...

        例2
        c:\data\volume.001
        c:\data\volume.002
        c:\data\volume.003
        ...

        例3
        disk.img
        c:\work\part2.dsk
        ..\image\data


アクセスモード
==============

    読み取り専用 (アクセスモードオプションなし) で開かれた仮想ディスクは
    書き込み保護されたボリュームとして扱われます。

    仮想ディスクを /RW や /UNDO オプションを使用して書き込み可能で開いた
    場合でも、REDO ログや差分ディスクのベースとなる仮想ディスクファイルは
    常に読み取り専用モードでアクセスされます。

    /RW オプションは、元の仮想ディスクファイルを実際に更新することになる
    ため、充分に注意して使用してください。

    /WB (書き込みブロック) オプションを使用する場合、仮想ドライブを長時間
    使用したり、大量のデータを書き込んだりすることは避けてください。
    仮想ドライブ上のデータは決して更新されませんが、OS のディスクキャッシュ
    にはドライブに書き込まれた「はず」のデータが格納されます。このデータの
    食い違いが問題を引き起こす可能性もあります。


その他
======

    仮想ディスクファイルの暗号化・圧縮

        NTFS にはファイルを暗号化・圧縮する機能がありますが、暗号化・圧縮
        されたファイルを VDK で使用することはできません。
        イメージファイルが暗号化・圧縮されていると、Windows のキャッシュ
        マネージャがデッドロックを引き起こす可能性があるためです。


    相対パスの解決

        定義ファイルや REDO ログ、差分ディスクで相対パスが使用されている
        場合、VMware は *.vmx ファイルの位置からパスを解決します。
        それに対し VDK.EXE は該当ファイルの位置から解決します。そのため、
        VDK.EXE が対象のファイルを見つけられないこともあります。その場合
        ユーザに正しいパスの入力を要求します。


    /UNDO オプションによる REDO ログ

        /UNDO オプションを使用して *.pln、*.dsk または *.vmdk ファイルを
        オープンした場合、VMware は VDK.EXE が作成した REDO ログをそのまま
        認識します。VMware を使用して REDO ログをコミットしたり破棄したり
        することができます。
 
        しかし VMware は *.REDO ファイルに対する REDO ログは認識しません。
        そのため、*.REDO ファイルをオープンするのに /UNDO オプションを使用
        した場合、作成された REDO ログは手動で削除する必要があります。


    REDO ログのオープン

        VDK.EXE は仮想ディスクの REDO ログを VMware のように自動で見つける
        ようなことをしません。REDO ログをオープンしたい場合、REDO ログの
        パスを指定する必要があります。

        VDK.EXE OPEN VDISK.VMDK

            VDISK.VMDK をオープンします。
            VDISK.VMDK.REDO は存在していてもまったく使用されません。

        VDK.EXE OPEN VDISK.VMDK.REDO

            VDISK.VMDK.REDO をオープンします。
            REDO ファイルが存在しない場合はエラーです。
            また VDISK.VMDK を読み取り専用で使用します。

        VDK.EXE OPEN VDISK.VMDK /UNDO

            VDISK.VMDK.REDO を作成して、書き込み可能でオープンします。
            REDO ファイルがすでに存在する場合はエラーです。
            また VDISK.VMDK を読み取り専用で使用します。

            VMware は VDISK.VMDK を使用するときに自動で VDISK.VMDK.REDO
            を認識して使用します。

        VDK.EXE OPEN VDISK.VMDK.REDO /UNDO

            VDISK.VMDK.REDO.REDO を作成して書き込み可能でオープンします。
            また VDISK.VMDK.REDO と VDISK.VMDK を読み取り専用で使用します。

            VMware で VDISK.VMDK や VDISK.VMDK.REDO を使用しても、そのまま
            では VDISK.VMDK.REDO.REDO は認識されません。
            VMware で VDISK.VMDK.REDO.REDO を使用するには明示的に指定する
            必要があります。


    REDO ログ・差分ディスクの使用

        仮想ディスクが更新された場合に、VDK は VMware のように仮想ディスク
        のタイムスタンプやシーケンス番号を更新しません。

        REDO ログや差分ディスクのベースとなる仮想ディスクに変更が加えられて
        結果的に REDO ログや差分ディスクが無効となってしまっていても VMware
        はそれを認識できません。

        REDO ログや差分ディスクのベースには絶対変更を加えないようにして
        ください。書き込みアクセスが必要な場合でも /UNDO や /WB オプション
        を使用して、/RW オプションは使用しないでください。


    仮想ディスク上のパーティション

        仮想ディスクをオープンしすると、VDK.EXE は以下の種類の
        パーティションにドライブ文字を割り当てます。
        
        - FAT16, NTFS (Windows NT)
        - FAT16, FAT32, NTFS (Windows 2000/XP)

        サードパーティのファイルシステムドライバがインストールしてあって
        これ以外のパーティションにアクセスしたい場合、VDK.EXE LINK コマンド
        を使用して手動でドライブ文字を割り当ててください。

        以下のファイルシステムドライバは VDK で問題なく動作します：

        - FAT32 for Windows NT
            FAT32 file system driver for Windows NT 4.0
            Sysinternals から入手可能
            http://www.sysinternals.com/

        - Paragon Ext2FS Anywhere Demo version
            ext2/ext3 file system driver for Windows 95/98/ME/NT/2000/XP
            (機能限定版フリーデモバージョン)
            Paragon Software Group から入手可能
            http://www.paragon-gmbh.com/

            このドライバのことを教えてくれた Dave Parsons 氏に感謝。
            多分製品版でも動作すると思いますが、まだ未確認です。

        以下のファイルシステムドライバは動作しますが若干の問題があります：

        - Ext2Fsd
            ext2 file system driver for Windows 2000/XP
            作者：Matt Wu 氏
            http://sys.xiloo.com/

            * このドライバはボリュームのディスマウントのサポートが不完全で、
            一度 ext2 パーティションをマウントするとその後パーティション
            オブジェクトを解放しません。その結果を VDK ドライバがアンロード
            できなくなります (リブートしない限り VDK ドライバを停止すること
            ができなくなります)。

        - Ext2 File System Driver for Windows NT 4.0
            ext2 file system driver for Windows NT 4.0
            作者：Manoj Paul Joseph 氏
            http://freesourcecodes.tripod.com/ext2.htm

            * このドライバはボリュームのディスマウントをサポートしません。
            一度 ext2 パーティションをマウントするとその後パーティション
            オブジェクトを解放しません。その結果を VDK ドライバがアンロード
            できなくなります。

        - EXT2IFS
            ext2 file system driver for Windows NT/2000/XP
            作者：John Newbigin 氏
            http://uranus.it.swin.edu.au/~jn/linux/ext2ifs.htm

            * このドライバはボリュームのディスマウントをサポートしません。
            一度 ext2 パーティションをマウントするとその後パーティション
            オブジェクトを解放しません。その結果を VDK ドライバがアンロード
            できなくなります。

            ** EXT2IFS に含まれている GUI フロントエンドプログラムは、
            ext2 パーティションは全て固定ディスク上にあるもの、という前提で
            作られています。そのため、このプログラムのドライブ文字割り当て
            機能は VDK の仮想ドライブには使用できません。.
            ただし、VDK.EXE を使用して ext2 パーティションにドライブ文字を
            割り当てれば、EXT2IFS ドライバはそのパーティションを認識して
            アクセスできるようになります。


        また、その他のユーティリティも使用可能です：:

        - explore2fs
            Windows から ext2 パーティションにアクセスするためのプログラム。
            http://uranus.it.swin.edu.au/~jn/linux/

            このプログラムのことを教えてくれた Joao Alves 氏に感謝。


    読み取り専用仮想ドライブ

        安全のため、デフォルトでは VDK.EXE は仮想ディスクを読み取り専用で
        オープンするようになって一ます。
        ですが、お馬鹿な Windows は「読み取り専用のハードドライブ」と
        なかなかうまくやって行けないようです：
        
        - Windows NT と Windows 2000 は読み取り専用の NTFS パーティション
          にアクセスできません (次項参照)。

        - 時折「キャッシュデータの遅延書き込みに失敗しました。データが失われ
          るかもしれません」と言うような警告が出ます。無視しましょう。

        - 読み取り専用ドライブを使いながら Windows NT のディスクアドミニ
          ストレータを起動するとシステム全体をフリーズしてくれます。

        - きっと他にも...


    NTFS パーティションの使用

        Windows NT と Windows 2000 は読み取り専用ドライブ上の NTFS
        パーティションをマウントできないため、NTFS パーティションを使う
        場合は仮想ディスクを書き込み可能な状態にしなければなりません。
        (Windows XP は読み取り専用の NTFS パーティションを使用できます)

        ただし、Windows NT で作成した NTFS パーティションを Windows 2000、
        Windows XP で使用するには注意が必要です。

        Windows NT と Windows 2000/XP では実は使用する NTFS のバージョンが
        違っています (Windows NT は NTFS 4, Windows 2000/XP は NTFS 5)。
        Windows 2000/XP が NTFS 4 のパーティションを見つけると、*ユーザに
        断りもなく* NTFS 5 にアップグレードしてしまいます。実際のところ、
        Windows 2000/XP は NTFS 5 にアップグレードしないと NTFS 4 パーティ
        ションをマウントできないようです。

        問題なのは、Windows NT はサービスパック 4 以上があたっていないと
        NTFS 5 パーティションにまったくアクセスできず、サービスパックが
        あたっていても chkdsk や一部のデフラグプログラムなどのディスク
        管理プログラムが NTFS 5 では使えない、ということです。
        しかも一度アップグレードされてしまうと元には戻せません。

        Windows 2000/XP から NTFS 4 パーティションを使う場合、絶対に /RW
        オプションは使用せず、/UNDO か /WB オプションを使用しましょう。



改版履歴
========

    2005/04/06  Version 3.2 リリース (VDK.SYS 3.1, VDK.EXE 3.2)
                - VMware Workstation 5.x で作成した仮想ディスクサポートを追加
                - "lsilogic" 仮想コントローラの仮想ディスクサポートを追加
                - VIEW, OPEN コマンドに /SEARCH オプションを追加。
                - OPEN コマンドに /UNDO:パス オプションを追加。

    2003/11/10  Version 3.1 リリース (VDK.SYS 3.1, VDK.EXE 3.1)
                - バグ修正：システムシャットダウン時にシステムをフリーズ
                  させることがある。
                - バグ修正：vdk.exe がディスクの先頭から 4GB 以降にある
                  拡張パーティションテーブルを読み取れない。
                - vdk.exe CLOSE コマンドに /Q (quiet) および /F (force)
                  オプションを追加。
                - ドキュメントおよびヘルプ内のユーザ権限に関する記述を修正。

    2003/11/04  Version 3.0 リリース (VDK.SYS 3.0, VDK.EXE 3.0)
                複数ドライブ、書き込みブロックモード、複数ファイルの
                セクタイメージ、パーティション情報参照機能を追加しました。

    2003/07/30  Version 2.0 リリース (VDK.SYS 2.0, VDK.EXE 2.0)
                VMware 4.0 仮想ディスク、単純なセクタイメージファイル、
                非パーティションディスクイメージのサポートを追加しました。

    2003/05/27  VDK.SYS 1.01
                4GB 以上の仮想ディスクを正しく扱えないバグを修正しました。

    2003/05/20  初版リリース (VDK.SYS 1.0, VDK.EXE 1.0)


